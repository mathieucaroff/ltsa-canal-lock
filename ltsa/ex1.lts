/**
 * The final system has two doors
 */
DOOR = CLOSED,
CLOSED = (is_closed -> CLOSED | open -> OPEN),
OPEN = (is_open -> OPEN | close -> CLOSED).

/**
 * The pool has two levels
 * it can go from level a to level b with action `a2b`
 * and the other way around with `b2a`
 */
POOL = A_LEVEL,
A_LEVEL = (is_a -> A_LEVEL | a2b -> B_LEVEL),
B_LEVEL = (is_b -> B_LEVEL | b2a -> A_LEVEL).

FILLABLE = EMPTY,
EMPTY = (is_empty -> EMPTY | fill -> FULL),
FULL = (is_full -> FULL | empty -> EMPTY).

/**
 * The pool can be filled by a ship or be empty
 */
|| HAS_SHIP = (FILLABLE).

/**
 * A closed pool is a pool with two doors
 */
|| CLOSED_POOL = (POOL || a:DOOR || b:DOOR) / {
    { is_a, a.open } / is_a,
    { is_b, b.open } / is_b,
    { a.is_closed, a2b } / a.is_closed,
    { b.is_closed, b2a } / b.is_closed
}.

/**
 * A ship is active
 */
SHIP = (ask_in -> enter -> ask_out -> exit -> END).

/**
 * This is the final system
 */
|| CLOSED_POOL_WITH_SHIP_STREAM(N=2) = (CLOSED_POOL || HAS_SHIP || ab[k:1..N]:SHIP) / {
    forall[k:1..N] {
        { a.is_open, ab[k].enter } / { fill, a.is_open },
        { b.is_open, ab[k].exit } / { empty, b.is_open },
        { ab[k].ask_in } / { a.open },
        { ab[k].ask_out } / { b.open }
    }
}.
